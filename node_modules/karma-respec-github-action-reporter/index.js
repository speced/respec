const { EOL } = require("os");

function Reporter() {
  const browserFailures = [];
  this.onSpecComplete = (_browser, result) => {
    if (!result.success) {
      const failure = parseFailure(result);
      browserFailures.push(failure);
    }
  };

  this.onRunComplete = () => {
    browserFailures.forEach(outputFailure);
  };
}

/**
 * @typedef {{ test: string[], file: string, line: number, col: number, message: string }} Failure
 * @returns {Failure}
 */
function parseFailure(result) {
  // convert newlines into array and flatten
  const log = [].concat.apply(
    [],
    result.log.map(message => message.split("\n"))
  );
  const { suite, description } = result;
  const message = log[0].replace("Error: ", "");
  const location = log[2].split(":9876/base/", 2)[1].replace(/\)$/, "");
  let [file, line, col] = location.split(":");
  line = parseInt(line, 10);
  col = parseInt(col, 10);
  const test = suite.concat(description);
  return { test, file, line, col, message };
}

/** @param {Failure} failure */
function outputFailure(failure) {
  const failureStr = formatFailure(failure);
  const properties = ["file", "line", "col"]
    .map(prop => `${prop}=${escapeProperty(failure[prop])}`)
    .join(",");

  process.stdout.write(`::error ${properties}::${escapeData(failureStr)}${EOL}`);
}

/** @param {Failure} failure */
function formatFailure(failure) {
  const test = failure.test.map((s, i) => `${" ".repeat(i * 2)}${s}`);
  return test.concat([failure.message]).join("\n");
}

/** @param {string} s */
function escapeData(s) {
  return s.replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
}

/** @param {string} s */
function escapeProperty(s) {
  return s
    .toString()
    .replace(/\r/g, "%0D")
    .replace(/\n/g, "%0A")
    .replace(/]/g, "%5D")
    .replace(/:/g, "%3A")
    .replace(/,/g, "%2C")
    .replace(/;/g, "%3B");
}

module.exports = {
  "reporter:respec-github-action": ["type", Reporter],
};
