{
  "event handler": [
    {
      "spec": "html",
      "type": "dfn",
      "normative": true,
      "uri": "webappapis.html#event-handlers",
      "title": "event handler",
      "comment": "all lowercase dfn title"
    }
  ],
  "list": [
    {
      "spec": "infra",
      "type": "dfn",
      "normative": true,
      "uri": "#list",
      "title": "list",
      "comment": "another all lower case title"
    }
  ],
  "ascii alphanumeric": [
    {
      "spec": "infra",
      "type": "dfn",
      "normative": true,
      "uri": "#ascii-alphanumeric",
      "title": "ascii alphanumeric"
    }
  ],
  "dictionary": [
    {
      "spec": "webidl",
      "type": "dfn",
      "normative": true,
      "uri": "#dfn-dictionary",
      "title": "dictionary"
    }
  ],
  "url parser": [
    {
      "spec": "url",
      "type": "dfn",
      "normative": true,
      "uri": "#concept-url-parser",
      "title": "URL parser"
    }
  ],
  "object": [
    {
      "spec": "html",
      "type": "element",
      "normative": true,
      "uri": "iframe-embed-object.html#the-object-element",
      "title": "object",
      "comment": "easy disambiguate with data-cite"
    },
    {
      "spec": "url",
      "type": "dfn",
      "for": ["url"],
      "normative": true,
      "uri": "#concept-url-object",
      "title": "object"
    },
    {
      "spec": "webidl",
      "type": "interface",
      "normative": true,
      "uri": "#idl-object",
      "title": "object",
      "comment": "easy disambiguate with data-cite"
    }
  ],
  "TextDecoderOptions": [
    {
      "spec": "encoding",
      "type": "dictionary",
      "normative": true,
      "uri": "#textdecoderoptions",
      "title": "TextDecoderOptions"
    }
  ],
  "fatal": [
    {
      "spec": "encoding",
      "type": "dict-member",
      "for": [
        "TextDecoderOptions"
      ],
      "normative": true,
      "uri": "#dom-textdecoderoptions-fatal",
      "title": "fatal"
    }
  ],
  "bearing angle": [
    {
      "spec": "css-values",
      "type": "dfn",
      "normative": false,
      "uri": "#bearing-angle",
      "title": "bearing angle",
      "comment": "non normative"
    }
  ],
  "fake inform 1": [
    {
      "spec": "local-1",
      "type": "dfn",
      "normative": false,
      "uri": "#fake-inform-1",
      "title": "fake Inform 1",
      "comment": "is fake. for testing only. non normative"
    }
  ],
  "fake inform 2": [
    {
      "spec": "local-2",
      "type": "dfn",
      "normative": false,
      "uri": "#fake-inform-2",
      "title": "fake inform 2"
    }
  ],
  "fake inform 3": [
    {
      "spec": "local-3",
      "type": "dfn",
      "normative": false,
      "uri": "#fake-inform-3",
      "title": "fake inform 3"
    }
  ],
  "fake inform 4": [
    {
      "spec": "local-4",
      "type": "dfn",
      "normative": false,
      "uri": "#fake-inform-4",
      "title": "fake inform 4"
    }
  ],
  "fetch": [
    {
      "spec": "fetch",
      "type": "dfn",
      "for": [
        "fetch record"
      ],
      "normative": true,
      "uri": "#concept-fetch-record-fetch",
      "title": "fetch",
      "comment": "ambiguous dfn title"
    },
    {
      "spec": "fetch",
      "type": "dfn",
      "normative": true,
      "uri": "#concept-fetch",
      "title": "fetch"
    },
    {
      "spec": "service-workers",
      "type": "event",
      "for": [
        "ServiceWorkerGlobalScope"
      ],
      "normative": true,
      "uri": "#service-worker-global-scope-fetch-event",
      "title": "fetch"
    }
  ],
  "Window": [
    {
      "spec": "html",
      "type": "interface",
      "normative": true,
      "uri": "window-object.html#window",
      "title": "Window"
    }
  ],
  "event": [
    {
      "spec": "dom",
      "type": "attribute",
      "for": ["Window"],
      "normative": true,
      "uri": "#dom-window-event",
      "title": "event"
    }
  ],
  "[[query]]": [
    {
      "spec": "permissions",
      "type": "attribute",
      "for": ["PermissionStatus"],
      "normative": true,
      "uri": "#dom-permissionstatus-query-slot",
      "title": "[[query]]"
    }
  ],
  "PermissionStatus": [
    {
      "spec": "permissions",
      "type": "interface",
      "normative": true,
      "uri": "#permissionstatus",
      "title": "PermissionStatus"
    }
  ],
  "addEventListener(type, callback)": [
    {
      "spec": "dom",
      "type": "method",
      "for": ["EventTarget"],
      "normative": true,
      "uri": "#dom-eventtarget-addeventlistener",
      "title": "addEventListener(type, callback)"
    }
  ],
  "EventTarget": [
    {
      "spec": "dom",
      "type": "interface",
      "normative": true,
      "uri": "#eventtarget",
      "title": "EventTarget"
    }
  ],
  "[[type]]": [
    {
      "spec": "credential-management",
      "type": "attribute",
      "for": ["Credential"],
      "normative": true,
      "uri": "#dom-credential-type-slot",
      "title": "[[type]]"
    },
    {
      "spec": "webauthn",
      "type": "attribute",
      "for": ["PublicKeyCredential"],
      "normative": true,
      "uri": "#dom-publickeycredential-type-slot",
      "title": "[[type]]"
    }
  ],
  "Credential": [
    {
      "spec": "credential-management",
      "type": "interface",
      "normative": true,
      "uri": "#credential",
      "title": "Credential"
    }
  ],
  "PublicKeyCredential": [
    {
      "spec": "webauthn",
      "type": "interface",
      "normative": true,
      "uri": "#publickeycredential",
      "title": "PublicKeyCredential"
    }
  ],
  "[[CollectFromCredentialStore]](options, sameOriginWithAncestors)": [
    {
      "spec": "credential-management",
      "type": "method",
      "for": ["Credential"],
      "normative": true,
      "uri": "#dom-credential-collectfromcredentialstore-slot",
      "title": "[[CollectFromCredentialStore]](options, sameOriginWithAncestors)"
    },
    {
      "spec": "credential-management",
      "type": "method",
      "for": ["PasswordCredential"],
      "normative": true,
      "uri": "#dom-passwordcredential-collectfromcredentialstore-slot",
      "title": "[[CollectFromCredentialStore]](options, sameOriginWithAncestors)"
    },
    {
      "spec": "credential-management",
      "type": "method",
      "for": ["FederatedCredential"],
      "normative": true,
      "uri": "#dom-federatedcredential-collectfromcredentialstore-slot",
      "title": "[[CollectFromCredentialStore]](options, sameOriginWithAncestors)"
    }
  ]
}
